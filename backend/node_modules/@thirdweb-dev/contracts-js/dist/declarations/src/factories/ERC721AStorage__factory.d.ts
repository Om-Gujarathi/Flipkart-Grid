import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721AStorage, ERC721AStorageInterface } from "../ERC721AStorage.js";
type ERC721AStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ERC721AStorage__factory extends ContractFactory {
    constructor(...args: ERC721AStorageConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ERC721AStorage>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): ERC721AStorage;
    connect(signer: Signer): ERC721AStorage__factory;
    static readonly bytecode = "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063852d9108146038575b600080fd5b605e7f5aa52bc3377dec757a2280f415d89b13ba8cd01bf969ccb7487e8a4fba742be381565b60405190815260200160405180910390f3fea2646970667358221220a530fcf7353d01595d435b70a891691c0799968f0a8c334a64e18ed1ce73dea264736f6c634300080c0033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): ERC721AStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ERC721AStorage;
}
export {};
//# sourceMappingURL=ERC721AStorage__factory.d.ts.map